[{"/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/index.js":"1","/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/App.js":"2","/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/reportWebVitals.js":"3","/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/Glitch.js":"4","/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/ScrambleWord.js":"5","/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/text-scramble.js":"6","/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/DigitHover.js":"7","/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/WaveWords.js":"8","/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/Navbar.js":"9"},{"size":500,"mtime":1607107780235,"results":"10","hashOfConfig":"11"},{"size":345,"mtime":1607129526265,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1607107780240,"results":"13","hashOfConfig":"11"},{"size":5843,"mtime":1607134328729,"results":"14","hashOfConfig":"11"},{"size":1275,"mtime":1607123563847,"results":"15","hashOfConfig":"11"},{"size":3161,"mtime":1607123541974,"results":"16","hashOfConfig":"11"},{"size":1966,"mtime":1607131689682,"results":"17","hashOfConfig":"11"},{"size":1722,"mtime":1607133203671,"results":"18","hashOfConfig":"11"},{"size":509,"mtime":1607130365624,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"kkxz70",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"22"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/index.js",[],["46","47"],"/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/App.js",["48"],"import logo from './logo.svg';\nimport './App.css';\nimport Glitch from './Glitch'\nimport DigitHover from './DigitHover'\nimport WavesWords from './WaveWords'\nimport Navbar from './Navbar'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Navbar/>\n    <Glitch/>\n    <DigitHover/>\n    <WavesWords/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/reportWebVitals.js",[],"/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/Glitch.js",["49","50","51"],"import React, { useState } from \"react\";\n\nimport IngredientProvider from \"@react-ingredients/ingredients-provider\";\nimport MomentumScroll from \"@react-ingredients/momentum-scroll\";\nimport Cursor, { Target } from \"@react-ingredients/cursor\";\nimport MagneticTransform from \"@react-ingredients/magnetic-transform\";\nimport ScrambleWord from \"./ScrambleWord\";\nimport \"./Glitch.scss\";\nimport gif1 from \"./gif/1.gif\";\nimport gif2 from \"./gif/2.gif\";\nimport gif3 from \"./gif/3.gif\";\nimport gif4 from \"./gif/4.gif\";\nimport gif5 from \"./gif/5.gif\";\nimport gif6 from \"./gif/6.gif\";\n\nconst cursorItems = [\n  {\n    image: gif1,\n    title: \"Kansas, USA\",\n    time: \"0:00:14\",\n    credits: {\n      creator: \"John Smith\",\n      title: \"Video of tornado during spring\",\n      contributor: \"Hello World\",\n    },\n  },\n  {\n    image: gif2,\n    title: \"Kansas, USA\",\n    time: \"0:00:14\",\n    credits: {\n      creator: \"John Smith\",\n      title: \"Video of tornado during spring\",\n      contributor: \"Hello World\",\n    },\n  },\n  {\n    image: gif3,\n    title: \"Kansas, USA\",\n    time: \"0:00:14\",\n    credits: {\n      creator: \"John Smith\",\n      title: \"Video of tornado during spring\",\n      contributor: \"Hello World\",\n    },\n  },\n  {\n    image: gif4,\n    title: \"Arkansas, USA\",\n    time: \"0:00:14\",\n    credits: {\n      creator: \"John Smith\",\n      title: \"Video of tornado during spring\",\n      contributor: \"Hello World\",\n    },\n  },\n  {\n    image: gif5,\n    title: \"Virginia, USA\",\n    time: \"0:00:14\",\n    credits: {\n      creator: \"John Smith\",\n      title: \"Video of tornado during spring\",\n      contributor: \"Hello World\",\n    },\n  },\n  {\n    image: gif6,\n    title: \"Maryland, USA\",\n    time: \"0:00:14\",\n    credits: {\n      creator: \"John Smith\",\n      title: \"Video of tornado during spring\",\n      contributor: \"Hello World\",\n    },\n  },\n  {\n    image: gif1,\n    title: \"Ohio, USA\",\n    time: \"0:00:14\",\n    credits: {\n      creator: \"John Smith\",\n      title: \"Video of tornado during spring\",\n      contributor: \"Hello World\",\n    },\n  },\n  {\n    image: gif2,\n    title: \"Michigan, USA\",\n    time: \"0:00:14\",\n    credits: {\n      creator: \"John Smith\",\n      title: \"Video of tornado during spring\",\n      contributor: \"Hello World\",\n    },\n  },\n];\n\nfunction randomInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst placements = [\n\n  \"glitch__center__end\",\n  \"glitch__center__center\",\n  \"glitch__center__start\"\n]\n\nfunction Glitch() {\n  const [isHovered, setIsHovered] = useState(false);\n  const [activeIndex, setActiveIndex] = useState(-1);\n  const [activeImage, setActiveImage] = useState(gif1);\n  const [activeInfo, setActiveInfo] = useState({\n    creator: \"\",\n    title: \"\",\n    contributor: \"\",\n  });\n\n  function changeBackground(item, index) {\n    console.log(item);\n    console.log(index);\n    setActiveIndex(index);\n    setIsHovered(true);\n    setActiveImage(item.image);\n    setActiveInfo(item.credits);\n  }\n\n  function checkStatus(index) {\n    if (!isHovered) {\n      return 1;\n    } else if (isHovered && index === activeIndex) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  function exitItem() {\n    setIsHovered(false);\n    setActiveImage(gif1);\n    setActiveInfo({\n      creator: \"\",\n      title: \"\",\n      contributor: \"\",\n    });\n  }\n\n  return (\n    <>\n      <IngredientProvider>\n        <MomentumScroll>\n          <Cursor>\n            <div className=\"center\">\n              <div class=\"image-container\">\n                <div class=\"image-frame\">\n                  <img src={activeImage} alt=\"\" />\n                </div>\n              </div>\n\n              <div\n                style={{\n                  position: \"absolute\",\n                  minHeight: \"100%\",\n                  minWidth: \"100vw\",\n                  zIndex: \"-1\",\n                  backgroundImage: `url(${activeImage})`,\n                  backgroundSize: \"cover\",\n                  backgroundRepeat: \"no-repeat\",\n                  backgroundPosition: \"center center\",\n                }}\n              ></div>\n\n              <div className=\"glitch__grid\" style={{marginTop: '50px'}}>\n                {cursorItems.map((item, index) => (\n                  <div >\n                  <div\n                    style={{ opacity: checkStatus(index), alignItems: 'center', justifyContent: index % 2 === 1 ? 'center' : 'flex-start' }}\n                    className= \"glitch__grid__item glitch__center__center\"\n                  >\n                    <MagneticTransform>\n                      <div\n                        className=\"grid__text\"\n                        onMouseEnter={() => changeBackground(item, index)}\n                        onMouseLeave={() => exitItem()}\n                      >\n                        <div className=\"grid__title\">{item.title}</div>\n                        <div className=\"grid__time\">{item.time}</div>\n                      </div>\n                    </MagneticTransform>\n                  </div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"glitch-info\">\n                {isHovered ? (\n                  <div className=\"scramble-container\">\n                    <ScrambleWord\n                      paragraph={activeInfo.creator}\n                      startPlay={true}\n                    />\n                    <ScrambleWord\n                      paragraph={activeInfo.title}\n                      startPlay={true}\n                    />\n                    <ScrambleWord\n                      paragraph={activeInfo.contributor}\n                      startPlay={true}\n                    />\n                  </div>\n                ) : (\n                  <></>\n                )}\n              </div>\n            </div>\n          </Cursor>\n        </MomentumScroll>\n      </IngredientProvider>\n    </>\n  );\n}\n\nexport default Glitch;\n","/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/ScrambleWord.js",["52","53","54"],"import React, { useCallback, useEffect, useState } from \"react\";\n\n\nimport { TextScramble } from \"./text-scramble\";\n\nconst samples = [\n  \"Bringing together features from early European grotesques and American gothics, Averta  is a geometric sans serif family with a simple, yet appealing, personality.\",\n  \"Our new Preview feature is like a private playground for developers, designers, and content creators\"\n];\n\nexport default function ScrambleWord({paragraph, startPlay, fullScramble}) {\n  const [text, setText] = useState(0);\n  const [play, setPlay] = useState(false)\n\n  function resetPlay() {\n      setText(0)\n      setPlay(true)\n  }\n\n  const handleComplete = useCallback(() => {\n    setTimeout(() => {\n      if (text === 0) {\n        setText(1);\n      } else {\n        setText(0);\n      }\n    }, 850);\n  }, [text]); \n\n\n\n  //    onMouseEnter={resetPlay}\n\n  return (\n    <div>\n   \n      <div\n\n      >\n        <TextScramble\n    \n          play={fullScramble ? fullScramble : startPlay ? startPlay : play}\n          setPlay = { setPlay}\n          \n          text={paragraph}\n          speed={1.2}\n          seed={1}\n          seedInterval={10}\n          step={1}\n          stepInterval={1}\n   \n          onComplete={handleComplete}\n        />\n      </div>\n    </div>\n  );\n}\n\n","/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/text-scramble.js",["55","56"],"\nimport React, { useRef, useCallback } from \"react\";\n\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction getRandomChar() {\n  const rand = getRandomInt(0, 60);\n  return String.fromCharCode(rand + 65);\n}\n\nexport const TextScramble = ({\n  play,\n  setPlay,\n  text,\n  speed = 1,\n  seed = 1,\n  seedInterval = 10,\n  step = 1,\n  stepInterval = 1,\n  scramble = 10,\n  onComplete\n}) => {\n  // animation frame request\n  const requestRef = React.useRef();\n\n  // time elapsed\n  const elapsedRef = useRef(0);\n  const fpsInterval = 1000 / (60 * speed);\n\n  // scramble tick\n  const tickRef = useRef(0);\n\n  // current characted index ref\n  const startCharRef = useRef(0);\n\n  // scramble controller\n  const scrambleRef = useRef();\n\n  // text node ref\n  const textRef = useRef();\n\n  const seedRandomCharacters = () => {\n    for (var i = 0; i < seed; i++) {\n      const pos = getRandomInt(startCharRef.current, text.length);\n      scrambleRef.current[pos] = scrambleRef.current[pos] || scramble;\n    }\n  };\n\n  const moveCharIndex = () => {\n    for (var i = 0; i < step; i++) {\n      const currentIndex = startCharRef.current;\n      scrambleRef.current[currentIndex] =\n        scrambleRef.current[currentIndex] || Math.floor(scramble);\n      startCharRef.current += 1;\n    }\n  };\n\n  const animate = (time) => {\n    const timeElapsed = time - elapsedRef.current;\n\n    requestRef.current = requestAnimationFrame(animate);\n\n    if (timeElapsed > fpsInterval) {\n      // timeRef.current = time - (timeElapsed % fpsInterval);\n      elapsedRef.current = time;\n      draw();\n    }\n  };\n\n  const draw = () => {\n    if (tickRef.current % seedInterval === 0) {\n      seedRandomCharacters();\n    }\n\n    if (tickRef.current % stepInterval === 0) {\n      moveCharIndex();\n    }\n\n    let newString = \"\";\n    let charsDone = 0;\n\n    for (var i = 0; i < text.length; i++) {\n      const cPos = scrambleRef.current[i];\n\n      switch (true) {\n        case text[i] === \" \":\n          newString += \" \";\n          charsDone++;\n          break;\n        case cPos <= 0:\n          newString += text[i];\n          charsDone++;\n          break;\n        case cPos >= 0 && i <= startCharRef.current:\n          newString += getRandomChar();\n          scrambleRef.current[i] -= 1;\n          break;\n        case cPos >= 0:\n          newString += getRandomChar();\n          break;\n        default:\n          newString += \"<span>&nbsp;</span>\";\n      }\n    }\n\n    textRef.current.innerHTML = newString;\n\n    if (charsDone === text.length) {\n      cancelAnimationFrame(requestRef.current);\n \n        setPlay(false)\n      return;\n    }\n\n    tickRef.current += 1;\n  };\n\n  React.useEffect(() => {\n    tickRef.current = 0;\n    startCharRef.current = 0;\n    scrambleRef.current = new Array(text.length);\n  }, [text, play]);\n\n  React.useEffect(() => {\n    if (play) {\n      requestRef.current = requestAnimationFrame(animate);\n    } else {\n      cancelAnimationFrame(requestRef.current);\n    }\n    return () => {\n      cancelAnimationFrame(requestRef.current);\n    };\n  }, [animate, play]); // Make sure the effect runs only once\n\n  return <p ref={textRef}>{text}</p>;\n};\n",["57","58"],"/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/DigitHover.js",["59","60"],"import React from 'react'\n\nimport ScrambleWord from \"./ScrambleWord\";\n\nconst Scrambles = [\n  {\n    date: \"2020\",\n    scores: [\n      \"Hello my name is\",\n      \"Lorem ipsum genertor\",\n      \"Hello world\",\n      \"Scrambles\",\n    ],\n    name: \"Ooga booga\",\n  },\n  {\n    date: \"2020\",\n    scores: [\n      \"Hello my name is\",\n      \"Lorem ipsum genertor\",\n      \"Hello world\",\n      \"Scrambles\",\n    ],\n    name: \"Ooga booga\",\n  },\n];\n\n\nconst mapLetters = ['A','B', 'C', 'D', 'E']\n\n\n\n\nexport default function DigitHover() {\n    const [activeIndex, setActiveIndex] = React.useState(-1)\n\n    function scrambleSet(index) {\n        console.log(index)\n        setActiveIndex(index)\n    }\n  return (\n    <div className=\"digit-container\">\n      <div className=\"digit-section\">\n        <div className=\"digit-title\">\n        \n        <div>\n        DISCOVERY <span class=\"blinking-cursor\">|</span>\n        </div>\n        </div>\n\n        {Scrambles.map((item, key) => (\n          <div className=\"digit-item\">\n            <div className=\"digit-name\">{item.name}</div>\n            <div className=\"digit-scores\">\n              {item.scores.map((word, index) => (\n                  <div className=\"digit-scramble\"\n                  onMouseEnter={() => scrambleSet(mapLetters[key] + index)}\n                  onMouseLeave={() => setActiveIndex(-1)}\n                \n                  >\n                  <div style={{display: \"flex\", flexDirection: 'row'}}>\n                  <span className=\"scramble__span\">{index}</span>\n                <ScrambleWord paragraph= {word} fullScramble={mapLetters[key] + index == activeIndex ? true : false} />\n                </div>\n                <ScrambleWord paragraph={\"0:00:11\"} fullScramble={mapLetters[key] + index == activeIndex ? true : false} />\n                \n                </div>\n              ))}\n            </div>\n\n            <div className=\"digit-date\">{item.date}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/WaveWords.js",["61"],"import \"./Waves.scss\";\n\n\nconst articles = [\n\n  {\n    link: '#',\n    title: 'John Smith',\n    description: 'The home of john SMITH IN THE FUTURE',\n    year: '2010'\n  },  {\n    link: '#',\n    title: 'John Smith',\n    description: 'The home of john SMITH IN THE FUTURE',\n    year: '2010'\n  },\n  {\n    link: '#',\n    title: 'John Smith',\n    description: 'The home of john SMITH IN THE FUTURE',\n    year: '2010'\n  },\n  {\n    link: '#',\n    title: 'John Smith',\n    description: 'The home of john SMITH IN THE FUTURE',\n    year: '2010'\n  },\n  {\n    link: '#',\n    title: 'John Smith',\n    description: 'The home of john SMITH IN THE FUTURE',\n    year: '2010'\n  }\n]\n\n\nexport default function WaveWords() {\n  return (\n      <div className=\"main-page\">\n           <div className=\"digit-title\">\n        \n        <div>\n        DISCOVERY <span class=\"blinking-cursor\">|</span>\n        </div>\n        </div>\n    <section className=\"press\">\n      <div className=\"press-container\">\n\n      {articles.map((item) => \n        <a\n          href={item.link}\n          rel=\"noopener\"\n          target=\"_blank\"\n        >\n          <span className=\"press-container__media\" aria-label={item.title}>\n            <span aria-hidden=\"true\">{item.title}</span>\n          </span>{\" \"}\n          <span\n            className=\"press-container__title\"\n            aria-label={item.description}\n          >\n            <span aria-hidden=\"true\">\n            {item.description}\n            </span>\n          </span>{\" \"}\n          <span className=\"press-container__year\" aria-label={item.year}>\n            <span aria-hidden=\"true\">{item.year}</span>\n          </span>{\" \"}\n        </a>\n      \n      )}\n      \n  \n      </div>\n    </section>\n    </div>\n  );\n}\n","/Users/ishansengupta/Desktop/real-glitch/real-glitch/src/Navbar.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":8,"nodeType":"68","messageId":"69","endLine":1,"endColumn":12},{"ruleId":"66","severity":1,"message":"70","line":5,"column":18,"nodeType":"68","messageId":"69","endLine":5,"endColumn":24},{"ruleId":"66","severity":1,"message":"71","line":99,"column":10,"nodeType":"68","messageId":"69","endLine":99,"endColumn":23},{"ruleId":"66","severity":1,"message":"72","line":103,"column":7,"nodeType":"68","messageId":"69","endLine":103,"endColumn":17},{"ruleId":"66","severity":1,"message":"73","line":1,"column":30,"nodeType":"68","messageId":"69","endLine":1,"endColumn":39},{"ruleId":"66","severity":1,"message":"74","line":6,"column":7,"nodeType":"68","messageId":"69","endLine":6,"endColumn":14},{"ruleId":"66","severity":1,"message":"75","line":15,"column":12,"nodeType":"68","messageId":"69","endLine":15,"endColumn":21},{"ruleId":"66","severity":1,"message":"76","line":2,"column":25,"nodeType":"68","messageId":"69","endLine":2,"endColumn":36},{"ruleId":"77","severity":1,"message":"78","line":61,"column":9,"nodeType":"79","endLine":71,"endColumn":4,"suggestions":"80"},{"ruleId":"62","replacedBy":"81"},{"ruleId":"64","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":63,"column":87,"nodeType":"85","messageId":"86","endLine":63,"endColumn":89},{"ruleId":"83","severity":1,"message":"84","line":65,"column":91,"nodeType":"85","messageId":"86","endLine":65,"endColumn":93},{"ruleId":"87","severity":1,"message":"88","line":54,"column":11,"nodeType":"89","endLine":54,"endColumn":26},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Target' is defined but never used.","'randomInteger' is defined but never used.","'placements' is assigned a value but never used.","'useEffect' is defined but never used.","'samples' is assigned a value but never used.","'resetPlay' is defined but never used.","'useCallback' is defined but never used.","react-hooks/exhaustive-deps","The 'animate' function makes the dependencies of useEffect Hook (at line 136) change on every render. To fix this, wrap the definition of 'animate' in its own useCallback() Hook.","VariableDeclarator",["92"],["90"],["91"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},"Wrap the definition of 'animate' in its own useCallback() Hook.",{"range":"95","text":"96"},[1329,1607],"useCallback((time) => {\n    const timeElapsed = time - elapsedRef.current;\n\n    requestRef.current = requestAnimationFrame(animate);\n\n    if (timeElapsed > fpsInterval) {\n      // timeRef.current = time - (timeElapsed % fpsInterval);\n      elapsedRef.current = time;\n      draw();\n    }\n  })"]